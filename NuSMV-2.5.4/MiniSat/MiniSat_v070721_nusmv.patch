diff -Naur minisat.ORIG/core/depend.mk minisat/core/depend.mk
--- minisat.ORIG/core/depend.mk	1970-01-01 01:00:00.000000000 +0100
+++ minisat/core/depend.mk	2010-01-27 12:44:25.000000000 +0100
@@ -0,0 +1,24 @@
+Main.o: Main.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h
+Solver.o: Solver.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h ../mtl/Sort.h
+Solver_C.o: Solver_C.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h Solver_C.h
+Main.op: Main.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h
+Solver.op: Solver.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h ../mtl/Sort.h
+Solver_C.op: Solver_C.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h Solver_C.h
+Main.od: Main.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h
+Solver.od: Solver.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h ../mtl/Sort.h
+Solver_C.od: Solver_C.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h Solver_C.h
+Main.or: Main.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h
+Solver.or: Solver.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h ../mtl/Sort.h
+Solver_C.or: Solver_C.C Solver.h ../mtl/Vec.h ../mtl/Heap.h ../mtl/Vec.h \
+  ../mtl/Alg.h SolverTypes.h Solver_C.h
diff -Naur minisat.ORIG/core/Solver.C minisat/core/Solver.C
--- minisat.ORIG/core/Solver.C	2006-12-08 20:41:40.000000000 +0100
+++ minisat/core/Solver.C	2010-01-27 12:44:25.000000000 +0100
@@ -175,8 +175,20 @@
 {
     Var next = var_Undef;
 
+    // NuSMV: PREF MOD
+    // Selection from preferred list
+    for (int i = 0; i < preferred.size(); i++) {
+      if (toLbool(assigns[preferred[i]]) == l_Undef) {
+	next = preferred[i];
+      }
+    }
+    // NuSMV: PREF MOD END
+    
     // Random decision:
-    if (drand(random_seed) < random_var_freq && !order_heap.empty()){
+    // NuSMV: PREF MOD
+    if (next == var_Undef && drand(random_seed) < random_var_freq &&
+	!order_heap.empty()){
+    // NuSMV: PREF MOD END
         next = order_heap[irand(random_seed,order_heap.size())];
         if (toLbool(assigns[next]) == l_Undef && decision_var[next])
             rnd_decisions++; }
@@ -497,6 +509,20 @@
 }
 
 
+// NuSMV: PREF MOD
+void Solver::addPreferred(Var v)
+{
+  preferred.push(v);
+}
+
+
+void Solver::clearPreferred()
+{
+  preferred.clear(0);
+}
+// NuSMV: PREF MOD END
+                                                       
+
 /*_________________________________________________________________________________________________
 |
 |  simplify : [void]  ->  [bool]
diff -Naur minisat.ORIG/core/Solver_C.C minisat/core/Solver_C.C
--- minisat.ORIG/core/Solver_C.C	1970-01-01 01:00:00.000000000 +0100
+++ minisat/core/Solver_C.C	2010-01-27 12:44:25.000000000 +0100
@@ -0,0 +1,198 @@
+/**************************************************************************************************
+
+Solver_C.C
+
+C-wrapper for Solver.C
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+
+#include "Solver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr)new Solver();
+}
+
+extern "C" void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (Solver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((Solver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((Solver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  return ((Solver *)ms)->newVar() + 1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+                                  int *clause_lits, int num_lits)
+{
+  int i;
+  vec<Lit> cl;
+  for(i = 0; i < num_lits; i++) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+  ((Solver *)ms)->addClause(cl);
+  if(((Solver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  bool ret = ((Solver *)ms)->solve();
+  if(ret)
+    return 1;
+  return 0;
+}
+
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+                                    int nof_assumed_lits,
+                                    int *assumed_lits)
+{
+  int i;
+  vec<Lit> cl;
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  solver.simplify();
+  if(solver.okay() == false)
+    return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; i++) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+
+  if (solver.solve(cl))
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((Solver *)ms)->simplify();
+  if(((Solver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms))
+    return -1;
+  /* minisat assigns all variables. just check */
+  assert(((Solver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((Solver *)ms)->model[var_num-1] == l_True)
+    return 1;
+  return 0;
+}
+
+
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  return solver.conflict.size();
+}
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  vec<Lit>& cf = solver.conflict;
+
+  for (int i = 0; i < cf.size(); i++) {
+    int v = var(~cf[i]);
+    int s = sign(~cf[i]);
+    assert(v != var_Undef);
+    conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+  }
+}
+
+/** mode can be  polarity_true, polarity_false, polarity_user, polarity_rnd */
+extern "C" void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);  
+  solver.polarity_mode = mode;
+}
+
+extern "C" int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);  
+  return solver.polarity_mode;
+}
+
+extern "C" void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+  solver.setRandomSeed(seed);
+}
diff -Naur minisat.ORIG/core/Solver_C.h minisat/core/Solver_C.h
--- minisat.ORIG/core/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ minisat/core/Solver_C.h	2010-01-27 12:44:25.000000000 +0100
@@ -0,0 +1,62 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+enum { polarity_true = 0, polarity_false = 1, 
+       polarity_user = 2, polarity_rnd = 3 };
+
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms);
+void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits);
+void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode);
+int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms);
+void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed);
+
+//=================================================================================================
+#endif
diff -Naur minisat.ORIG/core/Solver.h minisat/core/Solver.h
--- minisat.ORIG/core/Solver.h	2006-11-10 22:54:29.000000000 +0100
+++ minisat/core/Solver.h	2010-01-27 12:44:25.000000000 +0100
@@ -58,6 +58,22 @@
     void    setPolarity    (Var v, bool b); // Declare which polarity the decision heuristic should use for a variable. Requires mode 'polarity_user'.
     void    setDecisionVar (Var v, bool b); // Declare if a variable should be eligible for selection in the decision heuristic.
 
+    // NuSMV: SEED 
+    void    setRandomSeed(double seed); // sets random seed (cannot be 0)
+    // NuSMV: SEED END
+    // NuSMV: PREF MOD
+    /*
+     * Add a variable at the end of the list of preferred variables
+     * Does not remove the variable from the standard ordering.
+     */
+    void addPreferred(Var v);
+    
+    /*
+     * Clear vector of preferred variables.
+     */
+    void clearPreferred();
+    // NuSMV: PREF MOD END
+
     // Read state:
     //
     lbool   value      (Var x) const;       // The current value of a variable.
@@ -136,6 +152,10 @@
     double              progress_estimate;// Set by 'search()'.
     bool                remove_satisfied; // Indicates whether possibly inefficient linear scan for satisfied clauses should be performed in 'simplify'.
 
+    // NuSMV: PREF MOD
+    vec<Var>            preferred;
+    // NuSMV: PREF MOD END
+
     // Temporaries (to reduce allocation overhead). Each variable is prefixed by the method in which it is
     // used, exept 'seen' wich is used in several places.
     //
@@ -246,6 +266,7 @@
 inline int      Solver::nVars         ()      const   { return assigns.size(); }
 inline void     Solver::setPolarity   (Var v, bool b) { polarity    [v] = (char)b; }
 inline void     Solver::setDecisionVar(Var v, bool b) { decision_var[v] = (char)b; if (b) { insertVarOrder(v); } }
+inline void     Solver::setRandomSeed (double seed) { assert(seed != 0); random_seed = seed; }
 inline bool     Solver::solve         ()              { vec<Lit> tmp; return solve(tmp); }
 inline bool     Solver::okay          ()      const   { return ok; }
 
diff -Naur minisat.ORIG/Makefile minisat/Makefile
--- minisat.ORIG/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ minisat/Makefile	2010-01-27 12:44:25.000000000 +0100
@@ -0,0 +1,34 @@
+# Copyright (c) 2007 by FBK-irst
+# Author: Roberto Cavada <cavada@fbk.eu>
+# This file has been added in order to make Minisat2 
+# compilable with NuSMV
+
+LIBNAME = libminisat.a
+EXT_LIBNAME = libMiniSat.a
+EXT_LIBIFC = Solver_C.h
+COREDIR = simp
+
+LN ?= ln -s
+RANLIB ?= ranlib
+RM ?= rm -f
+MAKE ?= make
+
+# ----------------------------------------------------------------------
+# this target is invoked by the builder
+lib: $(EXT_LIBNAME) $(EXT_LIBIFC)
+	@echo Done
+
+clean: 
+	cd $(COREDIR) && $(MAKE) clean
+	$(RM) $(EXT_LIBNAME) $(EXT_LIBIFC)
+	$(RM) $(COREDIR)/depend.mk
+# ----------------------------------------------------------------------
+
+$(COREDIR)/$(LIBNAME):
+	cd $(COREDIR) && $(MAKE) lib && $(RANLIB) $(LIBNAME)
+
+$(EXT_LIBNAME): $(COREDIR)/$(LIBNAME)
+	$(LN) $(COREDIR)/$(LIBNAME) $(EXT_LIBNAME)
+
+$(EXT_LIBIFC):
+	$(LN) $(COREDIR)/$(EXT_LIBIFC) $(EXT_LIBIFC)
diff -Naur minisat.ORIG/mtl/template.mk minisat/mtl/template.mk
--- minisat.ORIG/mtl/template.mk	2006-10-02 14:15:07.000000000 +0200
+++ minisat/mtl/template.mk	2010-01-27 12:44:25.000000000 +0100
@@ -17,6 +17,7 @@
 LIB       ?= $(EXEC)
 
 CXX       ?= g++
+AR        ?= ar
 CFLAGS    ?= -Wall
 LFLAGS    ?= -Wall
 
@@ -70,7 +71,7 @@
 lib$(LIB).a lib$(LIB)d.a:
 	@echo Library: "$@ ( $^ )"
 	@rm -f $@
-	@ar cq $@ $^
+	$(AR) cq $@ $^
 
 ## Clean rule
 clean:
diff -Naur minisat.ORIG/simp/Makefile minisat/simp/Makefile
--- minisat.ORIG/simp/Makefile	2006-10-02 14:09:42.000000000 +0200
+++ minisat/simp/Makefile	2010-01-27 12:44:25.000000000 +0100
@@ -5,7 +5,8 @@
 CFLAGS    = -I$(MTL) -I$(CORE) -Wall -ffloat-store
 LFLAGS    = -lz
 
-CSRCS     = $(wildcard *.C)
+CMAINS    = Main.C
+CSRCS     = $(filter-out $(CMAINS), $(wildcard *.C))
 COBJS     = $(addsuffix .o, $(basename $(CSRCS))) $(CORE)/Solver.o
 
 include ../mtl/template.mk
diff -Naur minisat.ORIG/simp/SimpSolver.C minisat/simp/SimpSolver.C
--- minisat.ORIG/simp/SimpSolver.C	2007-07-21 00:07:17.000000000 +0200
+++ minisat/simp/SimpSolver.C	2010-01-27 12:44:25.000000000 +0100
@@ -20,7 +20,6 @@
 #include "Sort.h"
 #include "SimpSolver.h"
 
-
 //=================================================================================================
 // Constructor/Destructor:
 
@@ -91,9 +90,28 @@
                 extra_frozen.push(v);
             } }
 
+	// NuSMV: PREF MOD
+        // Preferred variables must be temporarily frozen to run variable
+	// elimination:
+        for (int i = 0; i < preferred.size(); i++){
+            Var v = preferred[i];
+
+            // If a preferred variable has been eliminated, remember it.
+            if (isEliminated(v))
+                remember(v);
+
+            if (!frozen[v]){
+                // Freeze and store.
+                setFrozen(v, true);
+                extra_frozen.push(v);
+            } }
+	// NuSMV: PREF MOD END
+
         result = eliminate(turn_off_simp);
     }
 
+    if (!result) ok = false;
+
     if (result)
         result = Solver::solve(assumps);
 
@@ -113,9 +131,10 @@
 }
 
 
-
 bool SimpSolver::addClause(vec<Lit>& ps)
 {
+    if (!ok) return false;
+
     for (int i = 0; i < ps.size(); i++)
         if (isEliminated(var(ps[i])))
             remember(var(ps[i]));
@@ -686,7 +705,7 @@
         // to deallocate them at this point. Could be improved.
         int cnt = 0;
         for (int i = 0; i < clauses.size(); i++)
-            if (!satisfied(*clauses[i]))
+            if (satisfied(*clauses[i]))
                 cnt++;
 
         fprintf(f, "p cnf %d %d\n", nVars(), cnt);
diff -Naur minisat.ORIG/simp/Solver_C.C minisat/simp/Solver_C.C
--- minisat.ORIG/simp/Solver_C.C	1970-01-01 01:00:00.000000000 +0100
+++ minisat/simp/Solver_C.C	2010-01-27 12:48:49.000000000 +0100
@@ -0,0 +1,234 @@
+/**************************************************************************************************
+
+Solver_C.C
+
+C-wrapper for Solver.C
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+
+#include "SimpSolver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr)new SimpSolver();
+}
+
+extern "C"void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (SimpSolver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((SimpSolver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((SimpSolver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  return ((SimpSolver *)ms)->newVar() + 1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+				  int *clause_lits, int num_lits)
+{
+  int i;
+  vec<Lit> cl;
+  for(i = 0; i < num_lits; i++) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((SimpSolver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+  ((SimpSolver *)ms)->addClause(cl);
+  if(((SimpSolver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  /* OLD WRONG CALL: bool ret = ((SimpSolver *)ms)->solve(true, true); */
+  /* WARNING:
+     We should call the SimpSolver:solve with only the simplification
+     flag set to true. The second argument should be set to false. It
+     seems to be an internal optimization to clean meamory that should
+     not be called if used in an incremental fashion. The instance of
+     the call with just one argument has by default the second
+     argument set to false.
+  */
+  bool ret = ((SimpSolver *)ms)->solve(true);
+  if(ret)
+    return 1;
+  return 0;
+}
+
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+				    int nof_assumed_lits,
+				    int *assumed_lits)
+{
+  int i;
+  vec<Lit> cl;
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);
+
+  solver.simplify();
+  if(solver.okay() == false)
+    return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; i++) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((SimpSolver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+
+  /* OLD WRONG CALL: if (solver.solve(cl, true, true)) */
+  /* WARNING:
+     We should call the SimpSolver:solve with only the simplification
+     flag set to true. The second argument should be set to false. It
+     seems to be an internal optimization to clean meamory that should
+     not be called if used in an incremental fashion. The instance of
+     the call with just one argument has by default the second
+     argument set to false.
+  */
+  if (solver.solve(cl, true))
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((SimpSolver *)ms)->simplify();
+  if(((SimpSolver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms))
+    return -1;
+  /* minisat assigns all variables. just check */
+  assert(((SimpSolver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((SimpSolver *)ms)->model[var_num-1] == l_True)
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);
+
+  return solver.conflict.size();
+}
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);
+
+  vec<Lit>& cf = solver.conflict;
+
+  for (int i = 0; i < cf.size(); i++) {
+    int v = var(~cf[i]);
+    int s = sign(~cf[i]);
+    assert(v != var_Undef);
+    conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+  }
+}
+
+/** mode can be  polarity_true, polarity_false, polarity_user, polarity_rnd */
+extern "C" void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode)
+{
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);  
+  solver.polarity_mode = mode;
+}
+
+extern "C" int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms)
+{
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);  
+  return solver.polarity_mode;
+}
+
+extern "C" void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed)
+{
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);
+  solver.setRandomSeed(seed);
+}
+
+
+// NuSMV: PREF MOD
+/* variables are in the range 1...N */
+extern "C" void MiniSat_Set_Preferred_Variable(MiniSat_ptr ms, int x)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */
+  ((SimpSolver *)ms)->addPreferred((Var) x);
+}
+
+extern "C" void MiniSat_Clear_Preferred_Variables(MiniSat_ptr ms)
+{
+
+  ((SimpSolver *)ms)->clearPreferred();
+}
+// NuSMV: PREF MOD END
diff -Naur minisat.ORIG/simp/Solver_C.h minisat/simp/Solver_C.h
--- minisat.ORIG/simp/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ minisat/simp/Solver_C.h	2010-01-27 12:44:25.000000000 +0100
@@ -0,0 +1,67 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+enum { polarity_true = 0, polarity_false = 1, 
+       polarity_user = 2, polarity_rnd = 3 };
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms);
+void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits);
+
+void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode);
+int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms);
+void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed);
+
+// NuSMV: PREF MOD
+void MiniSat_Set_Preferred_Variable(MiniSat_ptr, int);
+void MiniSat_Clear_Preferred_Variables(MiniSat_ptr);
+// NuSMV: PREF MOD END
+
+//=================================================================================================
+#endif
